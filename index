<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>생산/재고 관리 프로그램</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Noto+Sans+KR:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', 'Noto Sans KR', sans-serif; }
        ::-webkit-scrollbar { width: 8px; height: 8px; }
        ::-webkit-scrollbar-track { background: #f1f1f1; }
        ::-webkit-scrollbar-thumb { background: #888; border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #555; }
        .section-hidden { display: none; }
        .modal-backdrop { background-color: rgba(0, 0, 0, 0.5); }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <!-- 전체 컨테이너 -->
    <div id="app-container" class="max-w-7xl mx-auto p-4">

        <!-- 사용자명 입력 화면 -->
        <div id="user-selection-screen">
            <div class="min-h-screen flex items-center justify-center">
                <div class="bg-white p-8 rounded-xl shadow-lg text-center w-full max-w-md">
                    <h1 class="text-2xl font-bold mb-2" data-lang-key="welcome_title">생산/재고 관리 프로그램</h1>
                    <p class="text-gray-600 mb-6" data-lang-key="welcome_subtitle">데이터 작성을 위해 사용자명을 입력해주세요.</p>
                    <input type="text" id="username-input" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="사용자명을 입력하세요">
                    <button id="start-app-btn" class="w-full bg-blue-600 text-white font-bold py-2 px-4 rounded-lg mt-4 hover:bg-blue-700 transition-colors" data-lang-key="start_button">시작하기</button>
                </div>
            </div>
        </div>
        
        <!-- 공통 헤더 -->
        <header id="app-header" class="bg-white p-4 rounded-xl shadow-md mb-6 justify-between items-center section-hidden">
            <div class="flex items-center">
                <button id="back-to-menu-btn" class="p-2 rounded-full hover:bg-gray-100 mr-4 section-hidden">
                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>
                </button>
                <h1 id="page-header-title" class="text-2xl font-bold text-gray-800"></h1>
            </div>
            <div class="flex items-center space-x-4">
                <span id="header-user-display" class="text-gray-600 font-semibold"></span>
                <div class="relative">
                    <select id="language-select" class="bg-gray-200 border-gray-200 text-gray-700 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2">
                        <option value="ko">언어 : 한국어</option>
                        <option value="si">언어 : සිංහල</option>
                    </select>
                </div>
                <button id="logout-btn" class="bg-red-500 text-white px-3 py-2 rounded-md text-sm hover:bg-red-600" data-lang-key="logout">로그아웃</button>
            </div>
        </header>

        <!-- 메인 메뉴 화면 -->
        <div id="main-menu-screen" class="section-hidden">
             <div class="text-center mb-12">
                <h1 class="text-4xl font-bold text-gray-800" data-lang-key="main_menu_title">메인 메뉴</h1>
             </div>
             <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 w-full max-w-6xl mx-auto">
                 <button class="main-menu-btn p-8 bg-white rounded-xl shadow-lg hover:shadow-2xl hover:-translate-y-2 transition-all" data-target="work-order-section">
                     <h2 class="text-2xl font-bold text-green-600" data-lang-key="nav_work_order">작업지시서</h2>
                     <p class="text-gray-500 mt-2" data-lang-key="menu_work_order_desc">관리자가 작업 내용을 지시합니다.</p>
                 </button>
                 <button class="main-menu-btn p-8 bg-white rounded-xl shadow-lg hover:shadow-2xl hover:-translate-y-2 transition-all" data-target="production-input-section">
                     <h2 class="text-2xl font-bold text-orange-600" data-lang-key="nav_production_input">생산량 입력</h2>
                     <p class="text-gray-500 mt-2" data-lang-key="menu_production_input_desc">근로자가 생산 실적을 입력합니다.</p>
                 </button>
                 <button class="main-menu-btn p-8 bg-white rounded-xl shadow-lg hover:shadow-2xl hover:-translate-y-2 transition-all" data-target="inventory-section">
                     <h2 class="text-2xl font-bold text-blue-600" data-lang-key="nav_inventory">입고/출고</h2>
                     <p class="text-gray-500 mt-2" data-lang-key="menu_inventory_desc">원재료 및 생산품의 입출고를 관리합니다.</p>
                 </button>
                 <button class="main-menu-btn p-8 bg-white rounded-xl shadow-lg hover:shadow-2xl hover:-translate-y-2 transition-all" data-target="list-section">
                     <h2 class="text-2xl font-bold text-purple-600" data-lang-key="nav_list">목록</h2>
                     <p class="text-gray-500 mt-2" data-lang-key="menu_list_desc">전체 재고 현황 및 기록을 조회합니다.</p>
                 </button>
             </div>
        </div>

        <!-- 기능 페이지 래퍼 -->
        <div id="page-wrapper" class="section-hidden">
            <div id="page-content">
                <!-- 작업지시서 -->
                <main id="work-order-section" class="section-hidden space-y-6">
                    <div class="bg-white p-6 rounded-xl shadow-md flex justify-end">
                        <button id="save-work-order-btn" class="bg-green-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg hover:bg-green-700" data-lang-key="save_work_order">작업지시서 저장</button>
                    </div>
                    <div class="bg-white p-6 rounded-xl shadow-md">
                        <div class="flex items-center mb-4">
                            <h2 class="text-xl font-bold" data-lang-key="attendance_header">근태</h2>
                            <button id="manage-worker-btn" class="ml-4 bg-gray-200 text-sm px-4 py-2 rounded-md hover:bg-gray-300" data-lang-key="manage_workers_btn">근무자 관리</button>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <div class="flex justify-between items-center mb-2">
                                    <label class="block text-sm font-medium text-gray-700" data-lang-key="day_workers">주간 근무자</label>
                                    <button class="add-attendance-btn text-sm bg-blue-100 text-blue-700 px-3 py-1 rounded-md" data-shift="day">+ 근무자 추가</button>
                                </div>
                                <div id="day-worker-attendance-list" class="space-y-3 mt-2 p-2 border rounded-md min-h-[100px]"></div>
                            </div>
                             <div>
                                <div class="flex justify-between items-center mb-2">
                                    <label class="block text-sm font-medium text-gray-700" data-lang-key="night_workers">야간 근무자</label>
                                    <button class="add-attendance-btn text-sm bg-blue-100 text-blue-700 px-3 py-1 rounded-md" data-shift="night">+ 근무자 추가</button>
                                </div>
                                <div id="night-worker-attendance-list" class="space-y-3 mt-2 p-2 border rounded-md min-h-[100px]"></div>
                            </div>
                        </div>
                    </div>
                    <div class="bg-white p-6 rounded-xl shadow-md">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                             <div>
                                <label for="wo-date" class="block text-sm font-medium text-gray-700" data-lang-key="date">날짜</label>
                                <input type="date" id="wo-date" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                           </div>
                             <div class="md:col-span-2">
                               <label for="wo-handover-notes" class="block text-sm font-medium text-gray-700" data-lang-key="handover_notes">전달사항</label>
                               <textarea id="wo-handover-notes" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
                           </div>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div class="bg-white p-6 rounded-xl shadow-md space-y-4">
                            <h3 class="text-lg font-bold text-green-600" data-lang-key="day_shift">☀️ 주간</h3>
                             <div class="space-y-4">
                                <div class="border border-green-200 p-4 rounded-lg">
                                    <h4 class="font-semibold text-green-800" data-lang-key="machine_1">1호기</h4>
                                    <div id="wo-day-m1-entries" class="space-y-4 mt-2"></div>
                                    <button class="add-entry-btn mt-2 bg-green-100 text-green-800 px-3 py-1 rounded-md w-full text-sm hover:bg-green-200" data-shift="day" data-machine="1" data-lang-key="add_machine_entry">+ 1호기 생산 추가</button>
                                </div>
                                <div class="border border-green-200 p-4 rounded-lg">
                                    <h4 class="font-semibold text-green-800" data-lang-key="machine_2">2호기</h4>
                                    <div id="wo-day-m2-entries" class="space-y-4 mt-2"></div>
                                    <button class="add-entry-btn mt-2 bg-green-100 text-green-800 px-3 py-1 rounded-md w-full text-sm hover:bg-green-200" data-shift="day" data-machine="2" data-lang-key="add_machine_entry">+ 2호기 생산 추가</button>
                                </div>
                                <div class="border border-green-200 p-4 rounded-lg">
                                    <h4 class="font-semibold text-green-800" data-lang-key="machine_3">3호기</h4>
                                    <div id="wo-day-m3-entries" class="space-y-4 mt-2"></div>
                                    <button class="add-entry-btn mt-2 bg-green-100 text-green-800 px-3 py-1 rounded-md w-full text-sm hover:bg-green-200" data-shift="day" data-machine="3" data-lang-key="add_machine_entry">+ 3호기 생산 추가</button>
                                </div>
                            </div>
                        </div>
                        <div class="bg-gray-800 text-white p-6 rounded-xl shadow-md space-y-4">
                            <h3 class="text-lg font-bold text-yellow-400" data-lang-key="night_shift">🌙 야간</h3>
                             <div class="space-y-4">
                                <div class="border border-gray-600 p-4 rounded-lg">
                                    <h4 class="font-semibold text-yellow-300" data-lang-key="machine_1">1호기</h4>
                                    <div id="wo-night-m1-entries" class="space-y-4 mt-2"></div>
                                    <button class="add-entry-btn mt-2 bg-gray-700 text-white px-3 py-1 rounded-md w-full text-sm hover:bg-gray-600" data-shift="night" data-machine="1" data-lang-key="add_machine_entry">+ 1호기 생산 추가</button>
                                </div>
                                <div class="border border-gray-600 p-4 rounded-lg">
                                    <h4 class="font-semibold text-yellow-300" data-lang-key="machine_2">2호기</h4>
                                    <div id="wo-night-m2-entries" class="space-y-4 mt-2"></div>
                                    <button class="add-entry-btn mt-2 bg-gray-700 text-white px-3 py-1 rounded-md w-full text-sm hover:bg-gray-600" data-shift="night" data-machine="2" data-lang-key="add_machine_entry">+ 2호기 생산 추가</button>
                                </div>
                                <div class="border border-gray-600 p-4 rounded-lg">
                                    <h4 class="font-semibold text-yellow-300" data-lang-key="machine_3">3호기</h4>
                                    <div id="wo-night-m3-entries" class="space-y-4 mt-2"></div>
                                    <button class="add-entry-btn mt-2 bg-gray-700 text-white px-3 py-1 rounded-md w-full text-sm hover:bg-gray-600" data-shift="night" data-machine="3" data-lang-key="add_machine_entry">+ 3호기 생산 추가</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
                <!-- 생산량 입력 -->
                <main id="production-input-section" class="section-hidden space-y-6">
                    <div id="work-order-list-view">
                        <div class="bg-white p-6 rounded-xl shadow-md">
                            <h2 class="text-xl font-bold mb-4">작업지시서 목록</h2>
                            <div id="work-order-list-container" class="space-y-2"></div>
                        </div>
                    </div>
                    <div id="production-input-detail-view" class="section-hidden space-y-6">
                        <div class="flex justify-between items-center">
                            <button id="back-to-wo-list-btn" class="bg-gray-200 px-4 py-2 rounded-md hover:bg-gray-300">목록으로</button>
                            <button id="save-production-input-btn" class="bg-orange-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg hover:bg-orange-700" data-lang-key="save_production_input">생산량 저장</button>
                        </div>
                        <div id="production-input-display" class="space-y-6">
                            <!-- 작업지시서 내용이 여기에 표시됩니다. -->
                        </div>
                    </div>
                </main>
                <main id="inventory-section" class="section-hidden"></main>
                <main id="list-section" class="section-hidden"></main>
            </div>
        </div>
    </div>

    <!-- 모달 및 템플릿들 -->
    <div id="worker-modal" class="fixed inset-0 z-50 items-center justify-center section-hidden">
        <div class="modal-backdrop fixed inset-0"></div>
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md relative">
            <h3 class="text-lg font-bold mb-4" data-lang-key="manage_workers">근무자 관리</h3>
            <div class="flex mb-4">
                <input type="text" id="new-worker-input" class="flex-grow border rounded-l-md p-2" placeholder="새 근무자 이름">
                <button id="add-worker-btn" class="bg-blue-500 text-white px-4 rounded-r-md hover:bg-blue-600" data-lang-key="add_button">추가</button>
            </div>
            <div id="worker-list-modal" class="space-y-2 max-h-60 overflow-y-auto"></div>
            <button id="close-worker-modal-btn" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
            </button>
        </div>
    </div>
    
    <div id="product-modal" class="fixed inset-0 z-50 items-center justify-center section-hidden">
        <div class="modal-backdrop fixed inset-0"></div>
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-3xl relative">
            <h3 class="text-lg font-bold mb-4" data-lang-key="manage_products">제품 정보 관리</h3>
            <input type="text" id="product-filter-input" class="w-full p-2 border rounded-md mb-4" placeholder="업체명으로 필터링...">
            <div id="product-list-container" class="space-y-2 max-h-96 overflow-y-auto"></div>
            <button id="close-product-modal-btn" class="absolute top-4 right-4 text-gray-500 hover:text-gray-800">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
            </button>
        </div>
    </div>

    <div id="worker-selection-modal" class="fixed inset-0 z-50 items-center justify-center section-hidden">
        <div class="modal-backdrop fixed inset-0"></div>
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md relative">
            <h3 class="text-lg font-bold mb-4" data-lang-key="select_workers">근무자 선택</h3>
            <div id="worker-selection-list" class="space-y-2 max-h-60 overflow-y-auto"></div>
            <div class="flex justify-end mt-4 space-x-2">
                 <button id="cancel-worker-selection-btn" class="bg-gray-200 px-4 py-2 rounded-md">취소</button>
                 <button id="confirm-worker-selection-btn" class="bg-blue-600 text-white px-4 py-2 rounded-md">확인</button>
            </div>
        </div>
    </div>

    <div id="confirmation-modal" class="fixed inset-0 z-50 items-center justify-center section-hidden">
        <div class="modal-backdrop fixed inset-0"></div>
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm relative text-center">
            <p id="confirmation-message" class="text-lg mb-4"></p>
            <button id="close-confirmation-modal-btn" class="bg-blue-600 text-white px-4 py-2 rounded-md">확인</button>
        </div>
    </div>

    <template id="wo-entry-template">
        <div class="production-entry border rounded-lg p-4 space-y-4 relative bg-white text-gray-800">
            <div class="flex justify-end space-x-2 absolute top-2 right-2">
                <button class="copy-entry-to-night-btn bg-indigo-500 text-white px-2 py-1 rounded-md text-xs hover:bg-indigo-600" data-lang-key="copy_to_night">야간 복사</button>
                <button class="delete-entry-btn text-red-500 hover:text-red-700">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>
                </button>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 pt-4">
                <div class="md:col-span-2 lg:col-span-4">
                    <div class="product-info-panel bg-gray-50 p-3 rounded-lg">
                        <div class="flex justify-between items-center mb-2">
                            <h4 class="font-semibold product-info-title" data-lang-key="product_info">제품 정보</h4>
                            <div>
                                <button class="save-product-btn text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-md" data-lang-key="save_product_spec">제품 사양 저장</button>
                                <button class="load-product-modal-btn text-xs bg-green-100 text-green-700 px-2 py-1 rounded-md" data-lang-key="load_product_spec">제품 사양 불러오기</button>
                            </div>
                        </div>
                        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-x-4 gap-y-2">
                            <div><label class="text-xs product-info-label" data-lang-key="client_name">업체명</label><input type="text" class="prod-input client_name w-full text-sm p-1 border-b" placeholder="A사"></div>
                            <div><label class="text-xs product-info-label" data-lang-key="item_name">품목</label><input type="text" class="prod-input item_name w-full text-sm p-1 border-b" placeholder="PET Flake"></div>
                            <div><label class="text-xs product-info-label" data-lang-key="grade">GRADE</label><input type="text" class="prod-input grade w-full text-sm p-1 border-b" placeholder="A"></div>
                            <div><label class="text-xs product-info-label" data-lang-key="mesh">망(Mesh)</label><input type="text" class="prod-input mesh w-full text-sm p-1 border-b" placeholder="120"></div>
                            <div class="col-span-2"><label class="text-xs product-info-label" data-lang-key="temp_condition">온도 조건</label>
                                <div class="flex items-center">
                                    <input type="number" class="prod-input temp_min w-full text-sm p-1 border-b" placeholder="280"> <span class="mx-1">~</span> <input type="number" class="prod-input temp_max w-full text-sm p-1 border-b" placeholder="300">℃
                                </div>
                            </div>
                            <div><label class="text-xs product-info-label" data-lang-key="pack_weight">포장중량(kg)</label><input type="number" class="prod-input pack_weight w-full text-sm p-1 border-b" placeholder="1000"></div>
                            <div><label class="text-xs product-info-label" data-lang-key="pack_spec">포장사양</label><input type="text" class="prod-input pack_spec w-full text-sm p-1 border-b" placeholder="bag"></div>
                        </div>
                    </div>
                </div>
                <div class="md:col-span-2"><label class="text-sm" data-lang-key="mix_lot">배합LOT</label><input type="text" class="prod-input mix_lot w-full p-2 border rounded-md"></div>
                <div class="md:col-span-2"><label class="text-sm" data-lang-key="label_lot">라벨LOT</label><input type="text" class="prod-input label_lot w-full p-2 border rounded-md"></div>
                <div class="md:col-span-4"><label class="text-sm" data-lang-key="test_sample">TEST/SAMPLE</label><input type="text" class="prod-input test_sample w-full p-2 border rounded-md"></div>
                <div class="md:col-span-4"><label class="text-sm" data-lang-key="remarks">비고</label><input type="text" class="prod-input remarks w-full p-2 border rounded-md"></div>
            </div>
        </div>
    </template>

    <!-- Firebase SDK -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, getDoc, collection, addDoc, onSnapshot, deleteDoc, updateDoc, query, orderBy, limit, getDocs } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        const firebaseConfig = typeof __firebase_config !== 'undefined' 
            ? JSON.parse(__firebase_config)
            : {
                apiKey: "AIzaSyBfpxEX8Orny65F-39gB3eikqddVqRjJW0",
                authDomain: "inventory-1cd47.firebaseapp.com",
                projectId: "inventory-1cd47",
                storageBucket: "inventory-1cd47.firebasestorage.app",
                messagingSenderId: "457081542611",
                appId: "1:457081542611:web:1c78706d660be49b32c126"
            };
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        let userId = null, userName = '', currentEditingProductEntry = null, allProducts = [], allWorkers = [];

        const translations = {
            ko: { welcome_title: "생산/재고 관리 프로그램", welcome_subtitle: "데이터 작성을 위해 사용자명을 입력해주세요.", start_button: "시작하기", logout: "로그아웃", main_menu_title: "메인 메뉴", manage_workers_btn: "근무자 관리", nav_work_order: "작업지시서", menu_work_order_desc: "관리자가 작업 내용을 지시합니다.", nav_production_input: "생산량 입력", menu_production_input_desc: "근로자가 생산 실적을 입력합니다.", nav_inventory: "입고/출고", menu_inventory_desc: "원재료 및 생산품의 입출고를 관리합니다.", nav_list: "목록", menu_list_desc: "전체 재고 현황 및 기록을 조회합니다.", attendance_header: "근태", day_workers: "주간 근무자", night_workers: "야간 근무자", work_hours: "근무 시간", date: "날짜", handover_notes: "전달사항", day_shift: "☀️ 주간", night_shift: "🌙 야간", machine_1: "1호기", machine_2: "2호기", machine_3: "3호기", add_machine_entry: "생산 추가", save_work_order: "작업지시서 저장", manage_workers: "근무자 관리", add_button: "추가", delete_button: "삭제", confirm_delete: "정말로 삭제하시겠습니까?", manage_products: "제품 정보 관리", product_info: "제품 정보", save_product_spec: "제품 사양 저장", load_product_spec: "제품 사양 불러오기", client_name: "업체명", item_name: "품목", grade: "GRADE", mesh: "망(Mesh)", temp_condition: "온도 조건", pack_weight: "포장중량(kg)", pack_spec: "포장사양", mix_lot: "배합LOT", label_lot: "라벨LOT", bag_no: "BAG NO", prod_amount: "생산량(kg)", test_sample: "TEST/SAMPLE", loss_rate: "Loss율/떡", remarks: "특이사항", load_work_order: "작업지시서 불러오기", no_work_order: "해당 날짜에 작업지시서가 없습니다.", save_production_input: "생산량 저장", copy_to_night: "야간 복사", select_workers: "근무자 선택" },
            si: { welcome_title: "නිෂ්පාදන සහ ඉන්වෙන්ටරි කළමනාකරණ වැඩසටහන", welcome_subtitle: "දත්ත ඇතුළත් කිරීමට කරුණාකර ඔබේ පරිශීලක නාමය ඇතුළත් කරන්න.", start_button: "ආරම්භ කරන්න", logout: "ඉවත් වන්න", main_menu_title: "ප්‍රධාන මෙනුව", manage_workers_btn: "සේවක කළමනාකරණය", nav_work_order: "වැඩ ඇණවුම", menu_work_order_desc: "කළමනාකරු විසින් වැඩ උපදෙස් ලබා දේ.", nav_production_input: "නිෂ්පාදන ප්‍රමාණය ඇතුළත් කිරීම", menu_production_input_desc: "සේවකයා විසින් නිෂ්පාදන කාර්ය සාධනය ඇතුළත් කරයි.", nav_inventory: "තොග ඇතුල්වීම/පිටවීම", menu_inventory_desc: "අමුද්‍රව්‍ය සහ නිමි භාණ්ඩ තොග කළමනාකරණය කරන්න.", nav_list: "ලැයිස්තුව", menu_list_desc: "සම්පූර්ණ තොග තත්ත්වය සහ වාර්තා බලන්න.", attendance_header: "පැමිණීම", day_workers: "දවල් මුර සේවකයින්", night_workers: "රාත්‍රී මුර සේවකයින්", work_hours: "සේවා කාලය", date: "දිනය", handover_notes: "භාරදීමේ සටහන්", day_shift: "☀️ දවල් මුරය", night_shift: "🌙 රාත්‍රී මුරය", machine_1: "යන්ත්‍රය 1", machine_2: "යන්ත්‍රය 2", machine_3: "යන්ත්‍රය 3", add_machine_entry: "නිෂ්පාදන එකතු කරන්න", save_work_order: "වැඩ ඇණවුම සුරකින්න", manage_workers: "සේවක කළමනාකරණය", add_button: "එකතු කරන්න", delete_button: "මකන්න", confirm_delete: "ඔබට මෙය මැකීමට අවශ්‍ය බව විශ්වාසද?", manage_products: "නිෂ්පාදන තොරතුරු කළමනාකරණය", product_info: "නිෂ්පාදන තොරතුරු", save_product_spec: "නිෂ්පාදන පිරිවිතර සුරකින්න", load_product_spec: "නිෂ්පාදන පිරිවිතර පූරණය කරන්න", client_name: "සේවාදායකයාගේ නම", item_name: "අයිතමය", grade: "ශ්‍රේණිය", mesh: "දැල (Mesh)", temp_condition: "උෂ්ණත්ව තත්ත්වය", pack_weight: "ඇසුරුම් බර (kg)", pack_spec: "ඇසුරුම් පිරිවිතර", mix_lot: "මිශ්‍ර කිරීමේ LOT", label_lot: "ලේබල් LOT", bag_no: "BAG NO", prod_amount: "නිෂ්පාදන ප්‍රමාණය (kg)", test_sample: "TEST/SAMPLE", loss_rate: "අලාභ අනුපාතය", remarks: "සටහන්", load_work_order: "වැඩ ඇණවුම පූරණය කරන්න", no_work_order: "මෙම දිනයේ වැඩ ඇණවුමක් නොමැත.", save_production_input: "නිෂ්පාදන ප්‍රමාණය සුරකින්න", copy_to_night: "රාත්‍රීයට පිටපත් කරන්න", select_workers: "සේවකයා තෝරන්න" }
        };
        
        let currentLanguage = 'ko';
        let currentShiftForWorkerSelection = null;

        function updateLanguage(lang) {
            currentLanguage = lang;
            document.getElementById('language-select').value = lang;
            document.querySelectorAll('[data-lang-key]').forEach(el => {
                const key = el.dataset.langKey;
                if (translations[lang] && translations[lang][key]) {
                    if (el.tagName === 'INPUT' || el.tagName === 'TEXTAREA') {
                        el.placeholder = translations[lang][key];
                    } else {
                        if (el.classList.contains('main-menu-btn')) {
                            const titleEl = el.querySelector('h2');
                            const descEl = el.querySelector('p');
                            if(titleEl) titleEl.textContent = translations[lang][titleEl.dataset.langKey];
                            if(descEl) descEl.textContent = translations[lang][descEl.dataset.langKey];
                        } else if (el.classList.contains('add-entry-btn')) {
                            const machine = el.dataset.machine;
                            el.textContent = `+ ${machine}호기 ${translations[lang][key]}`;
                        } else {
                            el.textContent = translations[lang][key];
                        }
                    }
                }
            });
            document.documentElement.lang = lang;
        }

        const screens = ['user-selection-screen', 'main-menu-screen', 'page-wrapper'];
        const mainSections = ['work-order-section', 'production-input-section', 'inventory-section', 'list-section'];
        const appHeader = document.getElementById('app-header');
        const backBtn = document.getElementById('back-to-menu-btn');

        function showScreen(screenId) {
            screens.forEach(id => {
                document.getElementById(id).classList.toggle('section-hidden', id !== screenId);
            });
            
            if (screenId === 'user-selection-screen') {
                appHeader.classList.add('section-hidden');
            } else {
                appHeader.classList.remove('section-hidden');
                appHeader.classList.add('flex');
            }

            if (screenId === 'page-wrapper') {
                backBtn.classList.remove('section-hidden');
            } else {
                backBtn.classList.add('section-hidden');
                document.getElementById('page-header-title').textContent = translations[currentLanguage].main_menu_title;
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            initApp();
            showScreen('user-selection-screen');
        });

        async function initApp() {
            try {
                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else {
                    await signInAnonymously(auth);
                }
            } catch (error) { console.error("Firebase Auth Error:", error); }
            onAuthStateChanged(auth, (user) => { if (user) { userId = user.uid; setupEventListeners(); loadInitialData(); } else { userId = null; } });
        }

        function setupEventListeners() {
            document.getElementById('start-app-btn').addEventListener('click', () => {
                const usernameInput = document.getElementById('username-input');
                if (usernameInput.value.trim() === '') { alert('사용자명을 입력해주세요.'); return; }
                userName = usernameInput.value.trim();
                const userDisplayText = `사용자: ${userName}`;
                document.getElementById('header-user-display').textContent = userDisplayText;
                showScreen('main-menu-screen');
            });

            document.getElementById('logout-btn').addEventListener('click', () => {
                userName = '';
                document.getElementById('username-input').value = '';
                showScreen('user-selection-screen');
            });

            document.getElementById('language-select').addEventListener('change', (e) => {
                updateLanguage(e.target.value);
            });

            document.querySelectorAll('.main-menu-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const targetId = e.currentTarget.dataset.target;
                    showScreen('page-wrapper');
                    mainSections.forEach(id => {
                        document.getElementById(id).classList.toggle('section-hidden', id !== targetId);
                    });
                    const titleKey = e.currentTarget.querySelector('h2').dataset.langKey;
                    document.getElementById('page-header-title').textContent = translations[currentLanguage][titleKey];

                    if (targetId === 'work-order-section') {
                        loadLatestWorkOrder();
                    }
                });
            });

            document.getElementById('back-to-menu-btn').addEventListener('click', () => {
                showScreen('main-menu-screen');
            });

            document.getElementById('wo-date').valueAsDate = new Date();
            document.getElementById('pi-date').valueAsDate = new Date();

            document.querySelectorAll('#work-order-section .add-entry-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    addWorkOrderEntry(e.currentTarget.dataset.shift, e.currentTarget.dataset.machine);
                });
            });
            document.getElementById('save-work-order-btn').addEventListener('click', saveWorkOrder);
            document.getElementById('manage-worker-btn').addEventListener('click', () => {
                document.getElementById('worker-modal').classList.remove('section-hidden');
                document.getElementById('worker-modal').classList.add('flex');
            });

            document.getElementById('load-work-order-btn').addEventListener('click', loadWorkOrderForInput);
            document.getElementById('save-production-input-btn').addEventListener('click', saveProductionInput);

            document.getElementById('close-worker-modal-btn').addEventListener('click', () => {
                document.getElementById('worker-modal').classList.add('section-hidden');
                document.getElementById('worker-modal').classList.remove('flex');
            });
            document.getElementById('add-worker-btn').addEventListener('click', addWorker);
            
            document.getElementById('close-product-modal-btn').addEventListener('click', () => {
                document.getElementById('product-modal').classList.add('section-hidden');
                document.getElementById('product-modal').classList.remove('flex');
            });
            document.getElementById('product-filter-input').addEventListener('input', (e) => {
                renderProductList(allProducts, e.target.value.toLowerCase());
            });

            document.querySelectorAll('.add-attendance-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    openWorkerSelectionModal(e.currentTarget.dataset.shift);
                });
            });
            document.getElementById('cancel-worker-selection-btn').addEventListener('click', () => {
                document.getElementById('worker-selection-modal').classList.add('section-hidden');
                document.getElementById('worker-selection-modal').classList.remove('flex');
            });
            document.getElementById('confirm-worker-selection-btn').addEventListener('click', confirmWorkerSelection);
        }

        function renderWorkerListForSelection(workers) {
            const listEl = document.getElementById('worker-selection-list');
            listEl.innerHTML = '';
            workers.forEach(worker => {
                const div = document.createElement('div');
                div.className = 'flex items-center';
                div.innerHTML = `
                    <input id="worker-select-${worker.id}" type="checkbox" value="${worker.data.name}" class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                    <label for="worker-select-${worker.id}" class="ml-3 block text-sm font-medium text-gray-700">${worker.data.name}</label>
                `;
                listEl.appendChild(div);
            });
        }

        function openWorkerSelectionModal(shift) {
            currentShiftForWorkerSelection = shift;
            renderWorkerListForSelection(allWorkers);
            document.getElementById('worker-selection-modal').classList.remove('section-hidden');
            document.getElementById('worker-selection-modal').classList.add('flex');
        }

        function confirmWorkerSelection() {
            const selectedWorkers = [];
            document.querySelectorAll('#worker-selection-list input[type="checkbox"]:checked').forEach(checkbox => {
                selectedWorkers.push(checkbox.value);
            });
            
            const listContainerId = `${currentShiftForWorkerSelection}-worker-attendance-list`;
            const listContainer = document.getElementById(listContainerId);

            selectedWorkers.forEach(name => {
                if (listContainer.querySelector(`[data-name="${name}"]`)) return;

                const div = document.createElement('div');
                div.className = 'worker-attendance-entry space-y-1';
                div.dataset.name = name;
                const defaultStartTime = currentShiftForWorkerSelection === 'day' ? '08:00' : '19:00';
                const defaultEndTime = currentShiftForWorkerSelection === 'day' ? '19:00' : '08:00';

                div.innerHTML = `
                    <div class="grid grid-cols-12 gap-2 items-center">
                        <p class="font-semibold col-span-3">${name}</p>
                        <div class="col-span-8 flex items-center">
                            <input type="time" class="worker-time-start w-full p-1 border rounded text-sm" value="${defaultStartTime}">
                            <span class="mx-1">~</span>
                            <input type="time" class="worker-time-end w-full p-1 border rounded text-sm" value="${defaultEndTime}">
                        </div>
                        <button class="remove-worker-btn col-span-1 text-red-500 hover:text-red-700 justify-self-end">X</button>
                    </div>
                    <div class="pl-4">
                        <input type="text" class="worker-remarks-input w-full p-1 border rounded text-sm" placeholder="특이사항">
                    </div>
                `;
                div.querySelector('.remove-worker-btn').onclick = () => div.remove();
                listContainer.appendChild(div);
            });

            document.getElementById('worker-selection-modal').classList.add('section-hidden');
            document.getElementById('worker-selection-modal').classList.remove('flex');
        }

        function renderProductList(products, filterText = '') {
            const container = document.getElementById('product-list-container');
            container.innerHTML = '';
            const filteredProducts = products.filter(p => p.data.client_name.toLowerCase().includes(filterText));
            if (filteredProducts.length === 0) {
                container.innerHTML = `<p class="text-gray-500 text-center">일치하는 제품이 없습니다.</p>`;
                return;
            }
            filteredProducts.forEach(product => {
                const div = document.createElement('div');
                div.className = 'grid grid-cols-12 gap-2 items-center p-2 rounded-lg hover:bg-gray-100';
                const infoDiv = document.createElement('div');
                infoDiv.className = 'col-span-10 cursor-pointer';
                infoDiv.innerHTML = `<span class="font-semibold">${product.data.client_name}</span><span class="text-gray-600 ml-2">${product.data.item_name}</span><span class="text-gray-500 ml-2 text-sm">(${product.data.grade})</span>`;
                infoDiv.onclick = () => loadSelectedProduct(product.id);
                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'col-span-2 bg-red-100 text-red-700 text-xs rounded-md py-1 hover:bg-red-200';
                deleteBtn.textContent = '삭제';
                deleteBtn.onclick = () => deleteProductSpec(product.id);
                div.appendChild(infoDiv); div.appendChild(deleteBtn);
                container.appendChild(div);
            });
        }

        function loadInitialData() {
            if (!userId) return;
            onSnapshot(collection(db, `artifacts/${appId}/users/${userId}/workers`), (snapshot) => { 
                allWorkers = snapshot.docs.map(doc => ({ id: doc.id, data: doc.data() }));
                const modalWorkerList = document.getElementById('worker-list-modal');
                modalWorkerList.innerHTML = '';
                allWorkers.forEach(worker => {
                    const modalDiv = document.createElement('div');
                    modalDiv.className = 'flex justify-between items-center bg-gray-100 p-2 rounded';
                    modalDiv.textContent = worker.data.name;
                    const deleteBtn = document.createElement('button');
                    deleteBtn.textContent = '삭제';
                    deleteBtn.className = 'text-red-500 text-xs hover:text-red-700';
                    deleteBtn.onclick = () => deleteWorker(worker.id);
                    modalDiv.appendChild(deleteBtn);
                    modalWorkerList.appendChild(modalDiv);
                });
            });
            onSnapshot(collection(db, `artifacts/${appId}/public/data/products`), (snapshot) => {
                allProducts = snapshot.docs.map(doc => ({ id: doc.id, data: doc.data() }));
                renderProductList(allProducts);
            });
        }
        
        async function addWorker() {
            if (!userId) { alert('사용자 정보가 없습니다.'); return; }
            const input = document.getElementById('new-worker-input');
            const workerName = input.value.trim();
            if (workerName) {
                try { await addDoc(collection(db, `artifacts/${appId}/users/${userId}/workers`), { name: workerName }); input.value = ''; }
                catch (error) { console.error("Error adding worker: ", error); alert('근무자 추가에 실패했습니다.'); }
            }
        }

        async function deleteWorker(docId) {
            if (!userId) { alert('사용자 정보가 없습니다.'); return; }
            if (confirm(translations[currentLanguage].confirm_delete)) {
                try { await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/workers`, docId)); }
                catch (error) { console.error("Error deleting worker: ", error); alert('근무자 삭제에 실패했습니다.'); }
            }
        }
        
        function addWorkOrderEntry(shift, machine) {
            const container = document.getElementById(`wo-${shift}-m${machine}-entries`);
            const lastEntry = container.querySelector('.production-entry:last-child');
            const dataToCopy = lastEntry ? getEntryData(lastEntry) : {};

            const template = document.getElementById('wo-entry-template');
            const clone = template.content.cloneNode(true);
            const entryDiv = clone.querySelector('.production-entry');
            
            if (shift === 'night') {
                entryDiv.classList.replace('bg-white', 'bg-gray-700');
                entryDiv.classList.replace('text-gray-800', 'text-white');
                const productInfoPanel = entryDiv.querySelector('.product-info-panel');
                productInfoPanel.classList.replace('bg-gray-50', 'bg-gray-600');
                entryDiv.querySelectorAll('.product-info-label').forEach(el => el.classList.add('text-gray-300'));
                entryDiv.querySelector('.product-info-title').classList.add('text-white');
                entryDiv.querySelectorAll('.prod-input').forEach(input => {
                    if (input.classList.contains('border-b')) {
                        input.classList.add('bg-transparent', 'text-white', 'border-gray-500');
                    } else {
                        input.classList.add('bg-gray-600', 'text-white', 'border-gray-500');
                    }
                });
            }

            for (const key in dataToCopy) {
                const input = entryDiv.querySelector(`.${key}`);
                if (input) { input.value = dataToCopy[key]; }
            }

            entryDiv.querySelector('.delete-entry-btn').addEventListener('click', (e) => { e.currentTarget.closest('.production-entry').remove(); });
            entryDiv.querySelector('.save-product-btn').addEventListener('click', (e) => saveProductSpec(e.currentTarget.closest('.production-entry')));
            entryDiv.querySelector('.load-product-modal-btn').addEventListener('click', (e) => {
                currentEditingProductEntry = e.currentTarget.closest('.production-entry');
                document.getElementById('product-modal').classList.remove('section-hidden');
                document.getElementById('product-modal').classList.add('flex');
            });
            
            const copyBtn = entryDiv.querySelector('.copy-entry-to-night-btn');
            if(shift === 'day' && copyBtn){
                copyBtn.onclick = () => {
                    const dayEntries = Array.from(container.children);
                    const entryIndex = dayEntries.indexOf(entryDiv);
                    const nightContainer = document.getElementById(`wo-night-m${machine}-entries`);
                    const targetNightEntry = nightContainer.children[entryIndex];
                    if (targetNightEntry) {
                        const currentData = getEntryData(entryDiv);
                        for (const key in currentData) {
                             const targetInput = targetNightEntry.querySelector(`.${key}`);
                             if(targetInput) targetInput.value = currentData[key];
                        }
                        alert(`${machine}호기 정보가 야간으로 복사되었습니다.`);
                    } else {
                        alert(`복사할 야간 ${machine}호기 항목이 없습니다. 먼저 야간 항목을 추가해주세요.`);
                    }
                };
            } else if (copyBtn) {
                copyBtn.remove();
            }

            container.appendChild(clone);
        }
        
        function getEntryData(entryElement) {
            const data = {};
            entryElement.querySelectorAll('.prod-input').forEach(input => {
                const key = Array.from(input.classList).find(c => c !== 'prod-input' && !c.startsWith('w-') && !c.startsWith('p-') && !c.startsWith('border'));
                if (key) { data[key] = input.value; }
            });
            return data;
        }

        async function saveProductSpec(entryElement) {
            const productData = { client_name: entryElement.querySelector('.client_name').value, item_name: entryElement.querySelector('.item_name').value, grade: entryElement.querySelector('.grade').value, mesh: entryElement.querySelector('.mesh').value, temp_min: entryElement.querySelector('.temp_min').value, temp_max: entryElement.querySelector('.temp_max').value, pack_weight: entryElement.querySelector('.pack_weight').value, pack_spec: entryElement.querySelector('.pack_spec').value, };
            if (!productData.client_name || !productData.item_name) { alert('업체명과 품목은 필수 항목입니다.'); return; }
            try { await addDoc(collection(db, `artifacts/${appId}/public/data/products`), productData); alert('제품 사양이 성공적으로 저장되었습니다.'); }
            catch (error) { console.error("Error saving product spec: ", error); alert('제품 사양 저장에 실패했습니다.'); }
        }

        async function deleteProductSpec(productId) {
            if (confirm(translations[currentLanguage].confirm_delete)) {
                try { await deleteDoc(doc(db, `artifacts/${appId}/public/data/products`, productId)); alert('제품 사양이 삭제되었습니다.'); }
                catch (error) { console.error("Error deleting product spec: ", error); alert('제품 사양 삭제에 실패했습니다.'); }
            }
        }
        
        async function loadSelectedProduct(productId) {
            if (!productId || !currentEditingProductEntry) return;
            try {
                const docSnap = await getDoc(doc(db, `artifacts/${appId}/public/data/products`, productId));
                if (docSnap.exists()) {
                    const productData = docSnap.data();
                    for (const key in productData) {
                        const input = currentEditingProductEntry.querySelector(`.${key}`);
                        if (input) { input.value = productData[key]; }
                    }
                    document.getElementById('product-modal').classList.add('section-hidden');
                    document.getElementById('product-modal').classList.remove('flex');
                    currentEditingProductEntry = null;
                }
            } catch (error) { console.error("Error loading product: ", error); alert('제품 정보를 불러오는 데 실패했습니다.'); }
        }
        
        async function saveWorkOrder() {
            if (!userId || !userName) { alert('사용자 정보가 없습니다.'); return; }
            const date = document.getElementById('wo-date').value;
            if (!date) { alert('날짜를 선택해주세요.'); return; }
            if (!confirm(`${date} 날짜의 작업지시서를 저장하시겠습니까?`)) return;
            
            const getAttendanceData = (listId) => {
                const workers = [];
                document.querySelectorAll(`#${listId} .worker-attendance-entry`).forEach(entry => {
                    workers.push({
                        name: entry.dataset.name,
                        time: `${entry.querySelector('.worker-time-start').value} ~ ${entry.querySelector('.worker-time-end').value}`,
                        remarks: entry.querySelector('.worker-remarks-input').value.trim()
                    });
                });
                return workers;
            };

            const workOrderData = { date: date, author: userName, userId: userId, createdAt: new Date().toISOString(), handover_notes: document.getElementById('wo-handover-notes').value, day_shift_workers: getAttendanceData('day-worker-attendance-list'), night_shift_workers: getAttendanceData('night-worker-attendance-list'), day_shift_entries: {}, night_shift_entries: {} };
            
            for (let i = 1; i <= 3; i++) {
                workOrderData.day_shift_entries[`machine_${i}`] = [];
                document.querySelectorAll(`#wo-day-m${i}-entries .production-entry`).forEach(entry => {
                    workOrderData.day_shift_entries[`machine_${i}`].push(getEntryData(entry));
                });
                workOrderData.night_shift_entries[`machine_${i}`] = [];
                document.querySelectorAll(`#wo-night-m${i}-entries .production-entry`).forEach(entry => {
                    workOrderData.night_shift_entries[`machine_${i}`].push(getEntryData(entry));
                });
            }
            try {
                await setDoc(doc(db, `artifacts/${appId}/public/data/work_orders`, date), workOrderData);
                alert('작업지시서가 성공적으로 저장되었습니다.');
            } catch (error) { console.error("Error saving work order: ", error); alert('데이터 저장 중 오류가 발생했습니다.'); }
        }

        async function loadWorkOrderForInput() {
            const date = document.getElementById('pi-date').value;
            if (!date) { alert('날짜를 선택해주세요.'); return; }
            const displayContainer = document.getElementById('production-input-display');
            const saveBtnContainer = document.getElementById('save-production-input-container');
            displayContainer.innerHTML = '';

            const docRef = doc(db, `artifacts/${appId}/public/data/work_orders`, date);
            const docSnap = await getDoc(docRef);

            if (docSnap.exists()) {
                renderWorkOrderForInput(docSnap.data());
                saveBtnContainer.classList.remove('section-hidden');
            } else {
                displayContainer.innerHTML = `<p class="text-center text-gray-500">${translations[currentLanguage].no_work_order}</p>`;
                saveBtnContainer.classList.add('section-hidden');
            }
        }

        function renderWorkOrderForInput(data) {
            const container = document.getElementById('production-input-display');
            container.innerHTML = ''; // Clear previous content

            const createEntryHTML = (entry, shift, machine, entryIndex) => {
                return `
                    <div class="production-input-entry border rounded-lg p-4 bg-white" data-shift="${shift}" data-machine="machine_${machine}" data-index="${entryIndex}">
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div class="col-span-full font-bold text-lg">${entry.client_name} - ${entry.item_name} (${entry.grade})</div>
                            <div><label class="text-sm text-gray-500">배합LOT</label><p>${entry.mix_lot || ''}</p></div>
                            <div><label class="text-sm text-gray-500">라벨LOT</label><p>${entry.label_lot || ''}</p></div>
                            <div><label class="text-sm font-medium" data-lang-key="bag_no">BAG NO</label><input type="text" class="pi-input bag_no w-full p-1 border rounded" value="${entry.bag_no || ''}"></div>
                            <div><label class="text-sm font-medium text-blue-600" data-lang-key="prod_amount">생산량(kg)</label><input type="number" class="pi-input prod_amount w-full p-1 border rounded" value="${entry.prod_amount || ''}"></div>
                            <div><label class="text-sm font-medium" data-lang-key="loss_rate">Loss율/떡</label><input type="text" class="pi-input loss_rate w-full p-1 border rounded" value="${entry.loss_rate || ''}"></div>
                        </div>
                    </div>
                `;
            };

            ['day', 'night'].forEach(shift => {
                const shiftData = data[`${shift}_shift_entries`];
                if (Object.keys(shiftData).length > 0) {
                    const shiftContainer = document.createElement('div');
                    const bgColor = shift === 'day' ? 'bg-white' : 'bg-gray-800 text-white';
                    const titleColor = shift === 'day' ? 'text-green-600' : 'text-yellow-400';
                    const titleText = shift === 'day' ? '☀️ 주간' : '🌙 야간';
                    
                    shiftContainer.className = `${bgColor} p-6 rounded-xl shadow-md space-y-4`;
                    shiftContainer.innerHTML = `<h3 class="text-lg font-bold ${titleColor}">${titleText}</h3>`;

                    for (let i = 1; i <= 3; i++) {
                        const machineKey = `machine_${i}`;
                        if (shiftData[machineKey] && shiftData[machineKey].length > 0) {
                            const machineContainer = document.createElement('div');
                            const borderColor = shift === 'day' ? 'border-green-200' : 'border-gray-600';
                            const machineTitleColor = shift === 'day' ? 'text-green-800' : 'text-yellow-300';
                            
                            machineContainer.className = `border ${borderColor} p-4 rounded-lg space-y-4`;
                            machineContainer.innerHTML = `<h4 class="font-semibold ${machineTitleColor}">${i}호기</h4>`;
                            
                            shiftData[machineKey].forEach((entry, index) => {
                                machineContainer.innerHTML += createEntryHTML(entry, shift, i, index);
                            });
                            shiftContainer.appendChild(machineContainer);
                        }
                    }
                    container.appendChild(shiftContainer);
                }
            });
        }

        async function saveProductionInput() {
            const date = document.getElementById('pi-date').value;
            if (!date) return;
            if (!confirm(`${date} 날짜의 생산량을 저장하시겠습니까?`)) return;

            const docRef = doc(db, `artifacts/${appId}/public/data/work_orders`, date);
            const docSnap = await getDoc(docRef);

            if (!docSnap.exists()) {
                alert('원본 작업지시서를 찾을 수 없습니다.');
                return;
            }

            const workOrderData = docSnap.data();

            document.querySelectorAll('#production-input-display .production-input-entry').forEach(entryEl => {
                const shift = entryEl.dataset.shift;
                const machine = entryEl.dataset.machine;
                const index = parseInt(entryEl.dataset.index, 10);

                const targetEntry = workOrderData[`${shift}_shift_entries`][machine][index];
                if (targetEntry) {
                    targetEntry.bag_no = entryEl.querySelector('.bag_no').value;
                    targetEntry.prod_amount = entryEl.querySelector('.prod_amount').value;
                    targetEntry.loss_rate = entryEl.querySelector('.loss_rate').value;
                }
            });

            try {
                await updateDoc(docRef, {
                    day_shift_entries: workOrderData.day_shift_entries,
                    night_shift_entries: workOrderData.night_shift_entries
                });
                alert('생산량이 성공적으로 저장되었습니다.');
            } catch(e) {
                console.error("Error updating production input: ", e);
                alert('생산량 저장에 실패했습니다.');
            }
        }

        async function loadLatestWorkOrder() {
            const workOrderRef = collection(db, `artifacts/${appId}/public/data/work_orders`);
            const q = query(workOrderRef, orderBy("createdAt", "desc"), limit(1));
            const querySnapshot = await getDocs(q);
            
            if (!querySnapshot.empty) {
                const latestData = querySnapshot.docs[0].data();
                populateWorkOrderForm(latestData);
            }
        }

        function populateWorkOrderForm(data) {
            // Clear existing form
            document.getElementById('wo-handover-notes').value = '';
            ['day', 'night'].forEach(shift => {
                 document.getElementById(`${shift}-worker-attendance-list`).innerHTML = '';
                 for (let i = 1; i <= 3; i++) {
                     document.getElementById(`wo-${shift}-m${i}-entries`).innerHTML = '';
                 }
            });

            // Populate new data
            document.getElementById('wo-handover-notes').value = data.handover_notes;

            ['day', 'night'].forEach(shift => {
                const listContainer = document.getElementById(`${shift}-worker-attendance-list`);
                data[`${shift}_shift_workers`].forEach(worker => {
                     const div = document.createElement('div');
                    div.className = 'worker-attendance-entry space-y-1';
                    div.dataset.name = worker.name;
                    const [startTime, endTime] = worker.time ? worker.time.split('~').map(t => t.trim()) : ['', ''];

                    div.innerHTML = `
                        <div class="grid grid-cols-12 gap-2 items-center">
                            <p class="font-semibold col-span-3">${worker.name}</p>
                            <div class="col-span-8 flex items-center">
                                <input type="time" class="worker-time-start w-full p-1 border rounded text-sm" value="${startTime}">
                                <span class="mx-1">~</span>
                                <input type="time" class="worker-time-end w-full p-1 border rounded text-sm" value="${endTime}">
                            </div>
                            <button class="remove-worker-btn col-span-1 text-red-500 hover:text-red-700 justify-self-end">X</button>
                        </div>
                        <div class="pl-4">
                            <input type="text" class="worker-remarks-input w-full p-1 border rounded text-sm" placeholder="특이사항" value="${worker.remarks || ''}">
                        </div>
                    `;
                    div.querySelector('.remove-worker-btn').onclick = () => div.remove();
                    listContainer.appendChild(div);
                });
            });

            ['day', 'night'].forEach(shift => {
                for (let i = 1; i <= 3; i++) {
                    const machineKey = `machine_${i}`;
                    if (data[`${shift}_shift_entries`][machineKey]) {
                        data[`${shift}_shift_entries`][machineKey].forEach(entryData => {
                            addWorkOrderEntry(shift, i, entryData);
                        });
                    }
                }
            });
        }

    </script>
</body>
</html>
